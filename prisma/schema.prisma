generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Ingredient {
  id                String             @id @default(uuid())
  name              String
  recipeIngredients RecipeIngredient[]

  @@index([name], map: "ingredients_name_index")
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  recipeId     String
  ingredientId String
  weight       Int
  quantity     Float      @default(1)
  unit         String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model Country {
  id      String   @id @default(uuid())
  name    String   @unique
  iso     String   @unique
  recipes Recipe[]
}

model Recipe {
  id                String             @id @default(uuid())
  title             String
  description       String?
  image             String?
  instructions      Json
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  countryId         String
  recipeIngredients RecipeIngredient[]
  favorites         Favorite[]
  country           Country            @relation(fields: [countryId], references: [id])
  // user              User               @relation(fields: [userId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId]) // Ensures a user can't favorite the same recipe multiple times
}


enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  // Optional for WebAuthn support

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // Recipe    Recipe[]
  // Favorite  Favorite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}