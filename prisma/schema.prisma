generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id                String             @id @default(uuid())
  name              String
  recipeIngredients RecipeIngredient[]

  @@index([name], map: "ingredients_name_index")
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  recipeId     String
  ingredientId String
  weight       Int
  quantity     Float      @default(1)
  unit         String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model Country {
  id      String   @id @default(uuid())
  name    String   @unique
  iso     String   @unique
  recipes Recipe[]
}

model Recipe {
  id                String             @id @default(uuid())
  title             String
  description       String?
  image             String?
  instructions      Json
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  countryId         String
  recipeIngredients RecipeIngredient[]
  favorites         Favorite[]
  country           Country            @relation(fields: [countryId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
}

model Favorite {
  id          String   @id @default(uuid())
  userId      String
  recipeId    String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId]) // Ensures a user can't favorite the same recipe multiple times
}



model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Used for credentials authentication
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  favorites     Favorite[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String? // OAuth-related
  access_token      String? // OAuth-related
  expires_at        Int?    // OAuth-related
  token_type        String? // OAuth-related
  scope             String? // OAuth-related
  id_token          String? // OAuth-related
  session_state     String? // OAuth-related
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
